# -*- coding: utf-8 -*-
"""Bioinformatics_#4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1StgrsGYG9dQoNFmsKKOiBofItQ3eZEHB

# Code for the week 4 quiz.
"""

alphabet = [ "A", "C", "G", "T"]
alpha_dict = { "A": 0, "C": 1, "G": 2, "T": 3 }

DNA = "TGACGTTC TAAGAGTT GGACGAAA CTGTTCGC"
DNA = DNA.split()

motif = "TGA GTT GAA TGT"

motif = motif.split()

k = len( motif[ 0 ] )

# Find the profile of a motif, then generate a motif from the profile.

# Find the profile.

# Generate a blank profile matrix.
profile = [ ]

consensus_string = ""

consensus_prob = [ ]

for nuc in alphabet:

  blank_kmer = [ 1 for i in range( k ) ]

  for mot in motif:

    #print( 'mot: ', mot, 'motif: ', motif, 'k: ', k )

    #print( 'motif: ', motif )

    for j in range( k ):

      #print( mot, j )
      if list( mot )[ j ] == nuc:
        

        blank_kmer[ j ] += 1

  profile.append( blank_kmer )


for i in range( k ):

  total_freq = profile[ 0 ][ i ] + profile[ 1 ][ i ] + profile[ 2 ][ i ] + profile[ 3 ][ i ]

  for j in range( 4 ):

    profile[ j ][ i ] = profile[ j ][ i ] / total_freq

    consensus_prob.append( profile[ j ][ i ] )

  consensus_string += list(alpha_dict.keys())[consensus_prob.index( max( consensus_prob ) )]
  consensus_prob = []


for l in range( len( DNA ) ):
  
  freq_table = {}


  for m in range( 0, len( DNA[ l ] ) - k + 1 ):

    kmer = DNA[ l ] [ m:(m + k) ]
    #print( kmer )

    prob = 1

    for p in range( k ):

      # There may be an error here.
      prob *= profile[ alpha_dict[ kmer[ p ] ]  ] [ p ]

    freq_table[ kmer ] = 1 - prob


  motif[ l ] = min( freq_table, key=freq_table.get )
  #print( motif )

for mot in motif:
  print(mot)

blank = ""

for kmer in motif:
    #print('This is also running')
    #print( kmer )

    blank += " " + kmer

print(blank)